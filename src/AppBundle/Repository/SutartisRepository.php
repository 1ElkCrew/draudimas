<?php

namespace AppBundle\Repository;
use AppBundle\Entity\User;

/**
 * SutartisRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SutartisRepository extends \Doctrine\ORM\EntityRepository {
    public function getYearlySum(User $user = null, \DateTime $dateStart, \DateTime $dateEnd){
        $qb = $this->createQueryBuilder('t')
            ->select('SUM(t.money)')
            ->where('t.inputDate >= :dateStart')
            ->andWhere('t.inputDate <= :dateEnd')
            ->andWhere('t.user = :user')
            ->andWhere('t.status != 2')
            ->setParameters([
                'dateStart' => $dateStart,
                'dateEnd' => $dateEnd,
                'user' => $user,
            ]);
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getYearlyAmount(User $user = null, \DateTime $dateStart, \DateTime $dateEnd){
        $qb = $this->createQueryBuilder('t')
            ->select('COUNT(t)')
            ->where('t.inputDate >= :dateStart')
            ->andWhere('t.inputDate <= :dateEnd')
            ->andWhere('t.user = :user')
            ->andWhere('t.status != 2')
            ->setParameters([
                'dateStart' => $dateStart,
                'dateEnd' => $dateEnd,
                'user' => $user,
            ]);
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getMonthlySum(User $user = null, \DateTime $dateStart, \DateTime $dateEnd){
        $qb = $this->createQueryBuilder('t')
            ->select('SUM(t.money)')
            ->where('t.inputDate >= :dateStart')
            ->andWhere('t.inputDate <= :dateEnd')
            ->andWhere('t.user = :user')
            ->andWhere('t.status != 2')
            ->setParameters([
                'dateStart' => $dateStart,
                'dateEnd' => $dateEnd,
                'user' => $user,
            ]);
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getMonthlyAmount(User $user = null, \DateTime $dateStart, \DateTime $dateEnd){
        $qb = $this->createQueryBuilder('t')
            ->select('COUNT(t)')
            ->where('t.inputDate >= :dateStart')
            ->andWhere('t.inputDate <= :dateEnd')
            ->andWhere('t.user = :user')
            ->andWhere('t.status != 2')
            ->setParameters([
                'dateStart' => $dateStart,
                'dateEnd' => $dateEnd,
                'user' => $user,
            ]);
        return $qb->getQuery()->getSingleScalarResult();
    }
    public function dataSort($request){
        $orderBy = [];
        if($request->query->has('orderBy')){
            $fields = explode(",",$request->query->get('orderBy'));
            foreach ($fields as $o) {
                $direction = 'ASC';
                if (substr($o, 0, 1) == "-") {
                    $o = substr($o, 1, strlen($o) - 1);
                    $direction = 'DESC';
                }
                $orderBy[$o] = $direction;
            }
        }
        else {
            $orderBy['status'] = 'ASC';
            $orderBy['inputDate'] = 'DESC';
            $orderBy['firmName'] = 'ASC';
        }
        return $orderBy;
    }

    public function getYearlyInfo(User $user = null, \DateTime $dateStart = null, \DateTime $dateEnd = null, $searchFirm = null){
        $qb = $this->createQueryBuilder('t')
            ->select('t');
        $qb->where('t.user = :user');

        if($searchFirm != null){
            $qb->andWhere('t.firmName = :searchFirm');
        }
        if($dateEnd != null && $dateStart != null){
            $qb ->andWhere('t.inputDate >= :dateStart')
                ->andWhere('t.inputDate <= :dateEnd');
        }

        //code is sweaty, mom's spaghetti
        if ($searchFirm != null && ($dateEnd != null && $dateStart != null)){
            $qb->setParameters([
                'user' => $user,
                'searchFirm' => $searchFirm,
                'dateStart' => $dateStart,
                'dateEnd' => $dateEnd,
            ]);
        }
        else if ($searchFirm == null && ($dateEnd != null && $dateStart != null)){
            $qb->setParameters([
                'user' => $user,
                'dateStart' => $dateStart,
                'dateEnd' => $dateEnd,
            ]);
        }
        else if ($searchFirm != null && ($dateEnd == null && $dateStart == null)){
            $qb->setParameters([
                'user' => $user,
                'searchFirm' => $searchFirm,
            ]);
        }
        else {
            $qb->setParameter('user', $user);
        }
        return $qb->getQuery()->getResult();
    }
}
